# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../../puppet_x/puppetlabs/<%= namespace %>/provider'

Puppet::Type.type(:<%= namespace %>_<%= name %>).provide(:swagger, :parent => PuppetX::Puppetlabs::<%= namespace.capitalize %>::Provider) do

  mk_resource_methods

  def self.instance_to_hash(instance)
    {
    ensure: :present,
    name: instance.metadata.name,
    <% model['properties'].each do |property_name, details| %>
      <% unless exclusions[name] and exclusions[name].include? property_name %>
        <%= property_name %>: instance.<%= property_name %>.respond_to?(:to_hash) ? instance.<%= property_name %>.to_hash : instance.<%= property_name %>,
      <% end %>
    <% end %>
    object: instance,
    }
  end

  def create
    Puppet.info("Creating <%= namespace %>_<%= name %> #{name}")
    create_instance_of('<%= name %>', name, build_params)
  end

  def flush
   unless @property_hash.empty?
     unless resource[:ensure] == :absent
        flush_instance_of('<%= name %>', name, @property_hash[:object], build_params)
      end
    end
  end

  def destroy
    Puppet.info("Deleting <%= namespace %>_<%= name %> #{name}")
    destroy_instance_of('<%= name %>', name)
    @property_hash[:ensure] = :absent
  end

  private
  def self.list_instances
    list_instances_of('<%= name %>')
  end

  def build_params
    params = {
    <% model['properties'].each do |property_name, details| %>
      <% unless exclusions[name] and exclusions[name].include? property_name %>
        <%= property_name %>: resource[:<%= property_name %>],
      <% end %>
    <% end %>
    }
    params.delete_if { |key, value| value.nil? }
    params
  end
end
